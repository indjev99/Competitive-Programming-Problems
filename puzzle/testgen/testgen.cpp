#include <iostream>
#include <fstream>
#include <vector>

struct Test
{
    double timeLimit;
    std::vector<std::string> source_tests;
};

// real
std::vector<Test> tests = {
    {2.0, {}},
    {2.0, {}},
    {2.0, {}},
    {2.0, {}},
    {2.0, {}},
    {2.0, {}},
    {2.0, {"Hs_16_100_25_05_001.has"}},
    {2.0, {"Hs_16_100_50_00_001.has"}},
    {2.0, {
        "Hs_16_100_25_05_002.has",
        "Hs_16_100_50_00_002.has",
        "Hs_16_100_75_15_002.has",
        "Hs_16_100_25_10_002.has",
        "Hs_16_100_50_05_002.has",
        "Hs_16_100_75_10_002.has",
    }},
    {2.0, {
        "Hs_16_100_25_00_003.has",
        "Hs_16_100_50_15_003.has",
        "Hs_16_100_75_05_003.has",
        "Hs_16_100_25_10_003.has",
        "Hs_16_100_50_05_003.has",
        "Hs_16_100_75_10_003.has",
    }},
    {2.0, {
        "Hs_16_100_25_00_004.has",
        "Hs_16_100_50_00_004.has",
        "Hs_16_100_75_00_004.has",
        "Hs_16_100_25_05_004.has",
        "Hs_16_100_50_05_004.has",
        "Hs_16_100_75_05_004.has",
        "Hs_16_100_25_10_004.has",
        "Hs_16_100_50_10_004.has",
        "Hs_16_100_75_10_004.has",
        "Hs_16_100_25_15_004.has",
        "Hs_16_100_50_15_004.has",
        "Hs_16_100_75_15_004.has",
        "Hs_16_100_25_00_005.has",
        "Hs_16_100_50_00_005.has",
        "Hs_16_100_75_00_005.has",
        "Hs_16_100_25_05_005.has",
        "Hs_16_100_50_05_005.has",
        "Hs_16_100_75_05_005.has",
        "Hs_16_100_25_10_005.has",
        "Hs_16_100_50_10_005.has",
        "Hs_16_100_75_10_005.has",
        "Hs_16_100_25_15_005.has",
        "Hs_16_100_50_15_005.has",
        "Hs_16_100_75_15_005.has",
        "Hs_16_100_25_00_006.has",
        "Hs_16_100_50_00_006.has",
        "Hs_16_100_75_00_006.has",
        "Hs_16_100_25_05_006.has",
        "Hs_16_100_50_05_006.has",
        "Hs_16_100_75_05_006.has",
        "Hs_16_100_25_10_006.has",
        "Hs_16_100_50_10_006.has",
        "Hs_16_100_75_10_006.has",
        "Hs_16_100_25_15_006.has",
        "Hs_16_100_50_15_006.has",
        "Hs_16_100_75_15_006.has",
    }},
    {2.0, {
        "Hs_16_100_25_00_007.has",
        "Hs_16_100_50_00_007.has",
        "Hs_16_100_75_00_007.has",
        "Hs_16_100_25_05_007.has",
        "Hs_16_100_50_05_007.has",
        "Hs_16_100_75_05_007.has",
        "Hs_16_100_25_10_007.has",
        "Hs_16_100_50_10_007.has",
        "Hs_16_100_75_10_007.has",
        "Hs_16_100_25_15_007.has",
        "Hs_16_100_50_15_007.has",
        "Hs_16_100_75_15_007.has",
        "Hs_16_100_25_00_008.has",
        "Hs_16_100_50_00_008.has",
        "Hs_16_100_75_00_008.has",
        "Hs_16_100_25_05_008.has",
        "Hs_16_100_50_05_008.has",
        "Hs_16_100_75_05_008.has",
        "Hs_16_100_25_10_008.has",
        "Hs_16_100_50_10_008.has",
        "Hs_16_100_75_10_008.has",
        "Hs_16_100_25_15_008.has",
        "Hs_16_100_50_15_008.has",
        "Hs_16_100_75_15_008.has",
        "Hs_16_100_25_00_009.has",
        "Hs_16_100_50_00_009.has",
        "Hs_16_100_75_00_009.has",
        "Hs_16_100_25_05_009.has",
        "Hs_16_100_50_05_009.has",
        "Hs_16_100_75_05_009.has",
        "Hs_16_100_25_10_009.has",
        "Hs_16_100_50_10_009.has",
        "Hs_16_100_75_10_009.has",
        "Hs_16_100_25_15_009.has",
        "Hs_16_100_50_15_009.has",
        "Hs_16_100_75_15_009.has",
    }},
    {5.0, {"Hs_24_200_50_10_001.has"}},
    {5.0, {"Hs_24_200_75_15_001.has"}},
    {5.0, {
        "Hs_24_200_25_05_002.has",
        "Hs_24_200_50_05_002.has",
        "Hs_24_200_75_00_002.has",
        "Hs_24_200_25_15_002.has",
        "Hs_24_200_50_10_002.has",
        "Hs_24_200_75_10_002.has",
    }},
    {5.0, {
        "Hs_24_200_25_10_003.has",
        "Hs_24_200_50_05_003.has",
        "Hs_24_200_75_05_003.has",
        "Hs_24_200_25_00_003.has",
        "Hs_24_200_50_15_003.has",
        "Hs_24_200_75_10_003.has",
    }},
    {8.0, {
        "Hs_24_200_25_00_004.has",
        "Hs_24_200_50_00_004.has",
        "Hs_24_200_75_00_004.has",
        "Hs_24_200_25_05_004.has",
        "Hs_24_200_50_05_004.has",
        "Hs_24_200_75_05_004.has",
        "Hs_24_200_25_10_004.has",
        "Hs_24_200_50_10_004.has",
        "Hs_24_200_75_10_004.has",
        "Hs_24_200_25_15_004.has",
        "Hs_24_200_50_15_004.has",
        "Hs_24_200_75_15_004.has",
        "Hs_24_200_25_00_005.has",
        "Hs_24_200_50_00_005.has",
        "Hs_24_200_75_00_005.has",
        "Hs_24_200_25_05_005.has",
        "Hs_24_200_50_05_005.has",
        "Hs_24_200_75_05_005.has",
        "Hs_24_200_25_10_005.has",
        "Hs_24_200_50_10_005.has",
        "Hs_24_200_75_10_005.has",
        "Hs_24_200_25_15_005.has",
        "Hs_24_200_50_15_005.has",
        "Hs_24_200_75_15_005.has",
    }},
    {8.0, {
        "Hs_24_200_25_00_007.has",
        "Hs_24_200_50_00_007.has",
        "Hs_24_200_75_00_007.has",
        "Hs_24_200_25_05_007.has",
        "Hs_24_200_50_05_007.has",
        "Hs_24_200_75_05_007.has",
        "Hs_24_200_25_10_007.has",
        "Hs_24_200_50_10_007.has",
        "Hs_24_200_75_10_007.has",
        "Hs_24_200_25_15_007.has",
        "Hs_24_200_50_15_007.has",
        "Hs_24_200_75_15_007.has",
        "Hs_24_200_25_00_008.has",
        "Hs_24_200_50_00_008.has",
        "Hs_24_200_75_00_008.has",
        "Hs_24_200_25_05_008.has",
        "Hs_24_200_50_05_008.has",
        "Hs_24_200_75_05_008.has",
        "Hs_24_200_25_10_008.has",
        "Hs_24_200_50_10_008.has",
        "Hs_24_200_75_10_008.has",
        "Hs_24_200_25_15_008.has",
        "Hs_24_200_50_15_008.has",
        "Hs_24_200_75_15_008.has",
    }},
};

// sample
std::vector<Test> sample = {
    {2.0, {}},
    {2.0, {}},
    {2.0, {}},
    {2.0, {}},
    {2.0, {}},
    {2.0, {}},
    {2.0, {"Hs_16_100_25_05_011.has"}},
    {2.0, {"Hs_16_100_50_00_011.has"}},
    {2.0, {
        "Hs_16_100_25_05_012.has",
        "Hs_16_100_50_00_012.has",
        "Hs_16_100_75_15_012.has",
        "Hs_16_100_25_10_012.has",
        "Hs_16_100_50_05_012.has",
        "Hs_16_100_75_10_012.has",
    }},
    {2.0, {
        "Hs_16_100_25_00_013.has",
        "Hs_16_100_50_15_013.has",
        "Hs_16_100_75_05_013.has",
        "Hs_16_100_25_10_013.has",
        "Hs_16_100_50_05_013.has",
        "Hs_16_100_75_10_013.has",
    }},
    {2.0, {
        "Hs_16_100_25_00_014.has",
        "Hs_16_100_50_00_014.has",
        "Hs_16_100_75_00_014.has",
        "Hs_16_100_25_05_014.has",
        "Hs_16_100_50_05_014.has",
        "Hs_16_100_75_05_014.has",
        "Hs_16_100_25_10_014.has",
        "Hs_16_100_50_10_014.has",
        "Hs_16_100_75_10_014.has",
        "Hs_16_100_25_15_014.has",
        "Hs_16_100_50_15_014.has",
        "Hs_16_100_75_15_014.has",
        "Hs_16_100_25_00_015.has",
        "Hs_16_100_50_00_015.has",
        "Hs_16_100_75_00_015.has",
        "Hs_16_100_25_05_015.has",
        "Hs_16_100_50_05_015.has",
        "Hs_16_100_75_05_015.has",
        "Hs_16_100_25_10_015.has",
        "Hs_16_100_50_10_015.has",
        "Hs_16_100_75_10_015.has",
        "Hs_16_100_25_15_015.has",
        "Hs_16_100_50_15_015.has",
        "Hs_16_100_75_15_015.has",
        "Hs_16_100_25_00_016.has",
        "Hs_16_100_50_00_016.has",
        "Hs_16_100_75_00_016.has",
        "Hs_16_100_25_05_016.has",
        "Hs_16_100_50_05_016.has",
        "Hs_16_100_75_05_016.has",
        "Hs_16_100_25_10_016.has",
        "Hs_16_100_50_10_016.has",
        "Hs_16_100_75_10_016.has",
        "Hs_16_100_25_15_016.has",
        "Hs_16_100_50_15_016.has",
        "Hs_16_100_75_15_016.has",
    }},
    {2.0, {
        "Hs_16_100_25_00_017.has",
        "Hs_16_100_50_00_017.has",
        "Hs_16_100_75_00_017.has",
        "Hs_16_100_25_05_017.has",
        "Hs_16_100_50_05_017.has",
        "Hs_16_100_75_05_017.has",
        "Hs_16_100_25_10_017.has",
        "Hs_16_100_50_10_017.has",
        "Hs_16_100_75_10_017.has",
        "Hs_16_100_25_15_017.has",
        "Hs_16_100_50_15_017.has",
        "Hs_16_100_75_15_017.has",
        "Hs_16_100_25_00_018.has",
        "Hs_16_100_50_00_018.has",
        "Hs_16_100_75_00_018.has",
        "Hs_16_100_25_05_018.has",
        "Hs_16_100_50_05_018.has",
        "Hs_16_100_75_05_018.has",
        "Hs_16_100_25_10_018.has",
        "Hs_16_100_50_10_018.has",
        "Hs_16_100_75_10_018.has",
        "Hs_16_100_25_15_018.has",
        "Hs_16_100_50_15_018.has",
        "Hs_16_100_75_15_018.has",
        "Hs_16_100_25_00_019.has",
        "Hs_16_100_50_00_019.has",
        "Hs_16_100_75_00_019.has",
        "Hs_16_100_25_05_019.has",
        "Hs_16_100_50_05_019.has",
        "Hs_16_100_75_05_019.has",
        "Hs_16_100_25_10_019.has",
        "Hs_16_100_50_10_019.has",
        "Hs_16_100_75_10_019.has",
        "Hs_16_100_25_15_019.has",
        "Hs_16_100_50_15_019.has",
        "Hs_16_100_75_15_019.has",
    }},
    {5.0, {"Hs_24_200_50_10_011.has"}},
    {5.0, {"Hs_24_200_75_15_011.has"}},
    {5.0, {
        "Hs_24_200_25_05_012.has",
        "Hs_24_200_50_05_012.has",
        "Hs_24_200_75_00_012.has",
        "Hs_24_200_25_15_012.has",
        "Hs_24_200_50_10_012.has",
        "Hs_24_200_75_10_012.has",
    }},
    {5.0, {
        "Hs_24_200_25_10_013.has",
        "Hs_24_200_50_05_013.has",
        "Hs_24_200_75_05_013.has",
        "Hs_24_200_25_00_013.has",
        "Hs_24_200_50_15_013.has",
        "Hs_24_200_75_10_013.has",
    }},
    {8.0, {
        "Hs_24_200_25_00_014.has",
        "Hs_24_200_50_00_014.has",
        "Hs_24_200_75_00_014.has",
        "Hs_24_200_25_05_014.has",
        "Hs_24_200_50_05_014.has",
        "Hs_24_200_75_05_014.has",
        "Hs_24_200_25_10_014.has",
        "Hs_24_200_50_10_014.has",
        "Hs_24_200_75_10_014.has",
        "Hs_24_200_25_15_014.has",
        "Hs_24_200_50_15_014.has",
        "Hs_24_200_75_15_014.has",
        "Hs_24_200_25_00_015.has",
        "Hs_24_200_50_00_015.has",
        "Hs_24_200_75_00_015.has",
        "Hs_24_200_25_05_015.has",
        "Hs_24_200_50_05_015.has",
        "Hs_24_200_75_05_015.has",
        "Hs_24_200_25_10_015.has",
        "Hs_24_200_50_10_015.has",
        "Hs_24_200_75_10_015.has",
        "Hs_24_200_25_15_015.has",
        "Hs_24_200_50_15_015.has",
        "Hs_24_200_75_15_015.has",
    }},
    {8.0, {
        "Hs_24_200_25_00_017.has",
        "Hs_24_200_50_00_017.has",
        "Hs_24_200_75_00_017.has",
        "Hs_24_200_25_05_017.has",
        "Hs_24_200_50_05_017.has",
        "Hs_24_200_75_05_017.has",
        "Hs_24_200_25_10_017.has",
        "Hs_24_200_50_10_017.has",
        "Hs_24_200_75_10_017.has",
        "Hs_24_200_25_15_017.has",
        "Hs_24_200_50_15_017.has",
        "Hs_24_200_75_15_017.has",
        "Hs_24_200_25_00_018.has",
        "Hs_24_200_50_00_018.has",
        "Hs_24_200_75_00_018.has",
        "Hs_24_200_25_05_018.has",
        "Hs_24_200_50_05_018.has",
        "Hs_24_200_75_05_018.has",
        "Hs_24_200_25_10_018.has",
        "Hs_24_200_50_10_018.has",
        "Hs_24_200_75_10_018.has",
        "Hs_24_200_25_15_018.has",
        "Hs_24_200_50_15_018.has",
        "Hs_24_200_75_15_018.has",
    }},
};

const int MAX_N = 1024;

int arr[MAX_N][MAX_N];

void doOne(std::ofstream& outF, const std::string& name)
{
    std::ifstream inF("source_tests/" + name);

    int n, m, k;
    inF >> n >> m >> k;
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < n; ++j)
        {
            inF >> arr[i * 2][j * 2];
        }
    }
    n = n * 2 - 1;
    m = m * 2 - 1;

    outF << n << " " << m << "\n";
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < n; ++j)
        {
            if (j > 0) outF << " ";
            outF << arr[i][j];
        }
        outF << "\n";
    }
}

void doSet(const std::string& dir, const std::vector<Test>& tests)
{
    int num = 1;
    for (const Test& test : tests)
    {
        std::string numS = std::to_string(num++);
        if (numS.size() == 1) numS = "0" + numS;

        std::ofstream outF(dir + "/puzzle." + numS + ".in");
        if (dir == "tests")
        {
            std::ofstream solF(dir + "/puzzle." + numS + ".sol");
        }

        outF << test.source_tests.size() << " " << test.timeLimit << "\n";

        for (const std::string& source_test : test.source_tests)
        {
            doOne(outF, source_test);
        }
    }
}

int main()
{
    doSet("tests", tests);
    doSet("sample", sample);
    return 0;
}
